@using Application.ReturnModels;
@using Application.UseCases;
@using Domain.Interfaces;
@using Domain.Models;
@using Domain.ReturnModels;
@using Microsoft.AspNetCore.Identity;
@using System.Collections.ObjectModel;
@layout DashboardLayout;
@using Microsoft.AspNetCore.Components.Forms
@using Serilog;
@using System.Diagnostics;
@using System.ComponentModel.DataAnnotations;
@using TastyBits.Components;
@using TastyBits.Services;
@using Application.Helpers;
@inject CreateMealUseCase _createMeal;
@inject LoggedUserService _loggedUserService;
@inject ISnackbar _snackBar;

<MudDialog>
    <DialogContent>
        <div >
            <div class="">
                <img class="rounded-lg" src="/pics/add-meal-salad-croped.jpg" alt="addMealpic" />
            </div>
            <EditForm Model="@newRecipe" OnSubmit="@InsertRecipe">
                <DataAnnotationsValidator />
                <div class="input-form">
                    <label>How are we calling this meal?</label>
                    <InputText placeholder="eg. Egg Omlet" @bind-Value="@newRecipe.Name"></InputText>
                    <ValidationMessage class="dangerText" For="@(()=>newRecipe.Name)"></ValidationMessage>
                </div>
                <div class="input-form">
                    <label>Describe it</label>
                    <InputText placeholder="eg. scrambled eggs inside a tortilla" @bind-Value="@newRecipe.Description"></InputText>
                    <ValidationMessage class="dangerText" For="@(()=> newRecipe.Description)"></ValidationMessage>
                </div>
                <div class="flex gap-3">
                    <div class="input-form">
                        <label>Servings ?</label>
                        <InputText placeholder="eg. two people" @bind-Value="@newRecipe.ServingAmount"></InputText>
                        <ValidationMessage class="dangerText" For="@(()=> newRecipe.ServingAmount)"></ValidationMessage>
                    </div>
                    <div class="input-form">
                        <label>Time to prepare ?</label>
                        <InputText placeholder="eg. 5-10 minutes" @bind-Value="@newRecipe.PrepTime"></InputText>
                        <ValidationMessage class="dangerText" For="@(()=> newRecipe.PrepTime)"></ValidationMessage>
                    </div>
                    <div class="input-form">
                        <label>Time to cook it ?</label>
                        <InputText placeholder="eg. 5 minutes" @bind-Value="@newRecipe.CookingTime"></InputText>
                        <ValidationMessage class="dangerText" For="@(()=> newRecipe.CookingTime)"></ValidationMessage>
                    </div>
                </div>
                <p class="font-medium mt-5">Select what time of day this meals is best suited for ?</p>
                <MudChipSet @bind-SelectedChips="_selectedChips"  MultiSelection="true" Filter="true">
                    @foreach (TimeOfDayMeal tItem in Enum.GetValues(typeof(TimeOfDayMeal))) {
                        <MudChip SelectedColor="Color.Success" Value="tItem">@tItem.ToString()</MudChip>
                    }
                </MudChipSet>
                <ValidationMessage class="dangerText" For="@(()=> newRecipe.TimeOfDayMeal)"></ValidationMessage>
                <div id="mealInstructions" class="input-form">
                    <label>Instructions on how to prepare this meal</label>
                    <InputTextArea class="p-2 border-2 rounded-lg border-gray-300  focus:outline-none focus:border-emerald-400 focus:shadow-sm focus:shadow-emerald-300" @bind-Value="newRecipe.Instructions" placeholder="Start with chopping the onions ..."></InputTextArea>
                </div>
                <div class="mt-5">
                    <IngredientTable isAddingNewRecipe="true" UserMealObject="newRecipe"></IngredientTable>
                    <ValidationMessage For="()=> newRecipe.Ingredients"></ValidationMessage>
                </div>
                <div class="mt-5 p-1 bg-amber-200 rounded-lg text-center">
                    <p class="text-sm text-gray-500 mb-2 mt-2 p-1 flex items-center">
                        <span class="">
                            <i class="fa-solid fa-circle-info text-blue-400 h-5 mr-2"></i>
                        </span>
                        We can calculate your meal macros if you enter your ingredients in english.
                     </p>
                </div>

                <p class="font-medium mt-5">And finally show us how your food looks like with some images</p>
                <TastyBrowseFiles AddedFiles="_imageFiles"></TastyBrowseFiles>
                <div id="formActions" class="flex justify-end gap-3 mt-5">
                    <button type="button" class="primaryOutline" @onclick="DialogClosing">
                        <div class ="flex gap-2 items-center">
                            <i class="fa fa-close"></i>
                            <p>Close</p>
                        </div>
                    </button>
                    <button type="submit" class="primaryButton font-bold">
                        <div class="flex gap-2 items-center">
                            @if (_isLoading) {
                                 <MudProgressCircular Indeterminate="true" Size="Size.Small" Color="Color.Primary"></MudProgressCircular> 
                            } else {
                                <span>
                                    <i class="fa fa-save"></i>
                                </span>
                            } 
                            <p>Save</p>
                        </div>
                    </button>
                </div>
            </EditForm>
        </div>
    </DialogContent>
</MudDialog>



@code {
    [CascadingParameter] 
    MudDialogInstance MudDialog { get; set; }

    private bool _isLoading { get; set; } = false;
    private UserMeal newRecipe { get; set; } = new UserMeal();
    private QuantityUnit _selectedQUnit { get; set; }
    private ObservableCollection<IBrowserFile> _imageFiles { get; set; } = new ObservableCollection<IBrowserFile>();
    [Inject]
    private TastyDialogService _dialogService { get; set; }

    private EditContext newRecipeContext { get; set; }
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }

    private MudChip[] _selectedChips;

    protected override void OnInitialized()
    {
        newRecipeContext = new EditContext(newRecipe);
        InitIngredientRows(); // init first row
    }

    public async Task InsertRecipe(EditContext context)
    {
        newRecipe.TimeOfDayMeal = TastyFunctions.ConvertMealTypes(_selectedChips);
        //remove any empty ingredients from the UI
        foreach (var item in newRecipe.Ingredients) {
            if (item.Name.Length == 0 & newRecipe.Ingredients.Count >1) {
                newRecipe.Ingredients.Remove(item);
            }
        }
        bool isFormValid = context.Validate();
        //var _validationErrorMessage = "GREŠKE: "+string.Join(", ",context.GetValidationMessages());
        //Debug.Print(_validationErrorMessage);
        //Log.Information("FORM VALID: "+isValid.ToString());
        if (isFormValid) {
            _isLoading = true;
            newRecipe.UserId = _loggedUserService.UserStore.Id;
            newRecipe.Images=await TastyFunctions.ConvertImageToBytesAsync(_imageFiles);
            //insert into database
            TaskResult result = await _createMeal.InsertNewMealAsync(newRecipe);
            if (!result.HasError) {
                Log.Information($"new meal inserted to database");
                await Task.Delay(500);
                newRecipe = new UserMeal();
                _imageFiles.Clear();
                InitIngredientRows();
                _snackBar.Add("New recipe added", Severity.Success);
            } else {
                Log.Information(result.ErrorDesc);
                _dialogService.ShowInfoError(result.ErrorDesc);
            }
        } else {
            // Model is not valid, handle validation errors or display them to the user
            _snackBar.Add("Error on adding a new recipe", Severity.Error);
        }
        _isLoading = false;
    }

    private void InitIngredientRows()
    {
        UserMeal.Ingridient newIngridients = new();
        newRecipe.Ingredients.Add(newIngridients);
        newIngridients.Num = 1;

        StateHasChanged();
    }

    private void DialogClosing()
    {
        MudDialog.Close();
    }
}
