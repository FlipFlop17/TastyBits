@page "/dashboard/recipe-new";
@using Microsoft.AspNetCore.Identity;
@using System.Collections.ObjectModel;
@using TastyBits.Model;
@layout DashboardLayout;
@using Microsoft.AspNetCore.Components.Forms
@using Serilog;
@using TastyBits.Components;
@using TastyBits.Services;
@inject IDialogService DialogService;
@inject MealService _mealService;
@inject UserManager<IdentityUser> _userManager;

<EditForm class="w-1/2" Model="@newRecipe" OnSubmit="@InsertRecipe" >
    <DataAnnotationsValidator/>
    <div class="input-form">
        <label>Add name</label>
        <InputText class="border-2" @bind-Value="@newRecipe.Name"></InputText>
        <ValidationMessage For="@(()=>newRecipe.Name)"></ValidationMessage>
    </div>
    <div class="input-form">
        <label>Description</label>
        <InputText class="border-2" @bind-Value="@newRecipe.Description"></InputText>
         <ValidationMessage For="@(() => newRecipe.Description)"></ValidationMessage>
    </div>
    <div class="mt-5" >
        <label class="font-medium">Whats your meal made of?</label>
        <div id="ingridientsTable" class="flex w-3/5 h-60 overflow-y-scroll">
            <table class="border-collapse text-left mt-2 grow">
                <thead>
                    <tr class="bg-amber-200 sticky top-0 z-10">
                        <th class="p-2 border-b-2 border-b-emerald-700"></th>
                        <th class="p-2 border-b-2 border-b-emerald-700">Ingredient</th>
                        <th class="p-2 border-b-2 border-b-emerald-700">
                            <MudBadge Icon="@Icons.Material.Outlined.Info" Color="Color.Transparent" title="Any kind of amount. Pinch, kg, fistful etc.">
                                Quantity
                            </MudBadge>
                        </th>
                    </tr>
                </thead>
                @foreach (UserMeal.Ingridient item in newRecipe.Ingredients) {
                    <tr>
                        <td class="p-2 border-b border-gray-200">
                            @* <p>@item.Num</p> *@
                            <div class="flex gap-3">
                                <button title="Add ingridient" type="button" @onclick="OpenNewIngridient">
                                    <i class="fa-solid fa-add text-emerald-500 hover:text-emerald-400-300 duration-500"></i>
                                </button>
                                <button title="Delete ingridient" type="button" @onclick=@( ()=> DeleteIngridient(item)) >
                                    <i class="fa-solid fa-trash-can text-red-400 hover:text-red-300 duration-500"></i>
                                </button>
                            </div>
                        </td>
                        <td class="border-b border-gray-200 p-2">
                            <input class="p-1 border-solid border-emerald-300 border-2 rounded-lg focus:outline-none" type="text" @bind="item.Name" />
                        </td>
                        <td class="p-2 border-b border-gray-200">
                            <input class="p-1 border-solid border-emerald-300 border-2 rounded-lg focus:outline-none" type="text" @bind="item.Quantity" />
                        </td>
                    </tr>
                }
            </table>
        </div>
    </div>
    <div class="input-form">
        <label>Servings</label>
        <InputText class="border-2" @bind-Value="@newRecipe.ServingAmount"></InputText>
        <ValidationMessage For="@(() => newRecipe.ServingAmount)"></ValidationMessage>
    </div>
    <div class="input-form">
        <label>Prep time</label>
        <InputText class="border-2" @bind-Value="@newRecipe.PrepTime"></InputText>
        <ValidationMessage For="@(() => newRecipe.PrepTime)"></ValidationMessage>
    </div>
    <div class="input-form">
        <label>Cooking time</label>
        <InputText class="border-2" @bind-Value="@newRecipe.CookingTime"></InputText>
        <ValidationMessage For="@(() => newRecipe.CookingTime)"></ValidationMessage>
    </div>
    <p class="font-medium mt-5">Show us how your food looks like with some images</p>
    <label for="inputImage" class="border-2 w-2/3 border-dashed border-emerald-400 hover:cursor-pointer p-4 mt-2">
        @foreach (var imageF in _imageFiles) {
            <div class="flex gap-2">
                <p>@imageF.Name</p>
                <button type="button" @onclick="@(() => RemoveUploadedImage(imageF))">
                    <i class="fa fa-remove text-red-400"></i>
                </button>
            </div>
        }
        <div>
            <p>Browse files</p>
        </div>
    </label>
    <InputFile id="inputImage" class="sr-only" OnChange="UploadImages">

    </InputFile>
    <div id="formActions" class="flex justify-end">
        <button type="submit" class="primaryButton w-20 mt-5 font-bold">
            Save
        </button>
    </div>
@*     @foreach (UserMeal.Ingridient item in newRecipe.Ingredients) {
        <div>@item.Name</div>
        <div>@item.Quantity</div>
    } *@
</EditForm>

@code {
    private UserMeal newRecipe { get; set; } = new UserMeal();
    private ObservableCollection<IBrowserFile> _imageFiles { get; set; } = new ObservableCollection<IBrowserFile>();
    [Inject]
    private TastyDialogService _dialogService { get; set; }

    private EditContext newRecipeContext { get; set; }
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }

    protected override void OnInitialized()
    {
        newRecipeContext = new EditContext(newRecipe);
        OpenNewIngridient(); // init first row

    }
    public async Task InsertRecipe(EditContext context)
    {
        bool isValid = context.Validate();
        bool isOk = false;
        //Log.Information("FORM VALID: "+isValid.ToString());
        if (isValid) {
            //TODO convert recipeentry to recipe data
            //bool isOk = await _dbService.InsertNewRecipeAsync(newRecipe);
            ClaimsPrincipal user = (await authState).User;
            newRecipe.UserId = (await _userManager.GetUserAsync(user)).Id;
            ConvertImagesToBytes(_imageFiles);
            TaskResult result =await _mealService.AddNewMealAsync(newRecipe);
            if (!result.HasError) {
                Log.Information($"new meal inserted to database");
                _dialogService.ShowInfoSuccess("New recipe added!");
                newRecipe = new();
                StateHasChanged();
            } else {
                Log.Information(result.ErrorDesc);
            }
        } else {
            // Model is not valid, handle validation errors or display them to the user
        }
    }
    private void OpenNewIngridient()
    {
        UserMeal.Ingridient newIngridients = new();
        newIngridients.Num = newRecipe.Ingredients.Count + 1;
        newRecipe.Ingredients.Add(newIngridients);
        StateHasChanged();
    }

    private void DeleteIngridient(UserMeal.Ingridient ing)
    {
        if (newRecipe.Ingredients.Count!=1) {
            newRecipe.Ingredients.Remove(ing);
        }
    }

    private async Task UploadImages(InputFileChangeEventArgs inputFiles)
    {
        foreach (var imageFile in inputFiles.GetMultipleFiles()) {
            _imageFiles.Add(imageFile);
        }
    }

    private async Task ConvertImagesToBytes(ObservableCollection<IBrowserFile> slike)
    {
        foreach (var imageFile in slike) {
            var imageStream = imageFile.OpenReadStream(imageFile.Size);
            byte[] imageBytes;
            using (var memoryStream = new MemoryStream()) {
                await imageStream.CopyToAsync(memoryStream);
                imageBytes = memoryStream.ToArray();
            }
            // Convert the byte array to a Base64-encoded string
            string base64Image = Convert.ToBase64String(imageBytes);
            newRecipe.Images.Add(base64Image);
        }
    }
    private void RemoveUploadedImage(IBrowserFile img)
    {
        _imageFiles.Remove(img);
    }
}
