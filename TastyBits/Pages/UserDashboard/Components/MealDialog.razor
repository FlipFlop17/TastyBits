@page "/dashboard/meal"
@layout DashboardLayout;
@using Serilog;
@using TastyBits.Model;
@using TastyBits.Services;
@inject ISnackbar _snackBar;
@inject MealServiceMediator _mealService;
@using TastyBits.Components;

<MudDialog>
    @* <TitleContent>
        @Meal.Name
    </TitleContent> *@
    <DialogContent>
        <div id="mealInfo">
            <MudCarousel TData="object" AutoCycle="true" EnableSwipeGesture="true" ShowArrows="true" ShowBullets="false"
                         Class="h-72 rounded-lg">
                @if (Meal.Images.Count > 0)
                {
                    @foreach (var img in Meal.Images)
                    {
                        <MudCarouselItem Transition="Transition.Slide">
                            <img class="object-fill" src="data:image/jpeg;base64,@img" alt="Recipe Image" />
                        </MudCarouselItem>
                    }

                }
                else
                {
                    <MudCarouselItem Transition="Transition.Slide">
                        <img class="object-fill" src="/pics/picture-not-available.jpg" alt="no image" />
                        </MudCarouselItem>
                    }
                }
            </MudCarousel>
            <div id="actionBar" class="flex mt-7 justify-end">
                <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                    <MudMenuItem @onclick="@EnableEditMeal">
                        <div class="flex items-center gap-2 text-emerald-600">
                            <i class="fa fa-edit"></i>
                            <p>Edit</p>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem @onclick="@TooglePopOver">
                        <div class="flex items-center gap-2 text-red-400">
                            <i class="fa fa-trash"></i>
                            <p>Delete</p>
                        </div>
                    </MudMenuItem>
                </MudMenu>
                <MudPopover Open="isToogledPopOver" AnchorOrigin="Origin.TopCenter" Fixed="true" Class="p-3">
                    <div class="flex flex-col text-red-400">
                        <p class="font-medium">Are you sure you want to delete this recipe ?</p>
                        <div class="flex gap-3 mt-3">
                            <button class="primaryOutline" @onclick="TooglePopOver">
                                Cancel
                            </button>
                            <button class="primaryButton !bg-red-400" @onclick="DeleteMeal">
                                <div class="flex items-center gap-3">
                                    @if (_isLoading) {
                                        <MudProgressCircular Size="Size.Small" Indeterminate="true" Color="Color.Primary"></MudProgressCircular>
                                    }
                                    <p>Delete</p>
                                </div>
                            </button>
                            @* <MudButton @onclick="DeleteMeal">
                                <div class="flex items-center gap-3">
                                    @if (_isLoading) {
                                        <MudProgressCircular Size="Size.Small" Indeterminate="true" Color="Color.Primary"></MudProgressCircular>
                                    }
                                    <p>Delete</p>
                                </div>
                            </MudButton> *@
                        </div>
                    </div>
                </MudPopover>
            </div>
            <div class="p-1 text-red-300 text-lg" hidden="@isFieldDisabled">
                <button @onclick="@CancelEdit">
                    <div class="flex gap-2 items-center">
                        <i class="fa fa-cancel"></i>
                        <p>Cancel</p>
                    </div>
                </button>
            </div>
            <div id="mealInfoData" class="mt-7 flex flex-col space-y-3">
                <div class="flex items-center gap-2">
                    <label class="text-2xl">
                        🍲
                    </label>
                    <InputText class="inputFieldEdit !bg-transparent !text-4xl" disabled="@isFieldDisabled" @bind-Value="@Meal.Name"></InputText>
                    @foreach (var item in Meal.TimeOfDayMeal) {
                        <MudChip>@item</MudChip>
                    }
                </div>
                <div class="flex flex-col space-y-3">
                    <label class="font-medium text-xl">📜 Description</label>
                    <InputText class="inputFieldEdit" disabled="@isFieldDisabled" @bind-Value="@Meal.Description"></InputText>
                </div>
                <div class="flex flex-col space-y-3">
                    <label class="font-medium text-xl">🍽️ Servings</label>
                    <InputText class="inputFieldEdit" disabled="@isFieldDisabled" @bind-Value="@Meal.ServingAmount"></InputText>
                </div>
                <div class="flex flex-col space-y-3">
                    <label class="font-medium text-xl">👨‍🍳 Cooking time</label>
                    <InputText class="inputFieldEdit" disabled="@isFieldDisabled" @bind-Value="@Meal.CookingTime"></InputText>
                </div>
                <div class="flex flex-col space-y-3">
                    <label class="font-medium text-xl">🔪 Preping time</label>
                    <InputText class="inputFieldEdit" disabled="@isFieldDisabled" @bind-Value="@Meal.PrepTime"></InputText>
                </div>
                <div class="flex flex-col space-y-3">
                    <label class="font-medium text-xl">💪 Calories</label>
                    <InputText class="inputFieldEdit" disabled="@isFieldDisabled" @bind-Value="@Meal.Calories"></InputText>
                </div>
            </div>
            <div id="actionBar" class="mt-5 flex justify-end">
                <button class="primaryOutline flex items-center gap-2" disabled="@isFieldDisabled" @onclick="@SaveEdits">
                    <div class="flex items-center gap-3">
                        @if (_isLoading) {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" Color="Color.Primary"></MudProgressCircular>
                        } else {
                            <span>
                                <i class="fa fa-save"></i>
                            </span>
                        }
                        <p>Save</p>
                    </div>
                </button>
            </div>
        </div>

    </DialogContent>
    <DialogActions>
        <button class="primaryButton">Save</button>
    </DialogActions>
</MudDialog>





@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public UserMeal Meal { get; set; }
    private bool _isLoading { get; set; } = false;

    private bool isFieldDisabled { get; set; } = true;
    private bool isToogledPopOver { get; set; } = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void TooglePopOver()
    {
        isToogledPopOver = !isToogledPopOver;
    }
    private void SaveEdits()
    {
        Log.Information("saving edits");
    }
    private void EnableEditMeal()
    {
        isFieldDisabled = false;
        StateHasChanged();
    }
    private void CancelEdit()
    {
        isFieldDisabled = true;
        StateHasChanged();
    }
    private async Task<bool> DeleteMeal()
    {
        _isLoading = true;
        var result= await _mealService.DeleteMealFromDatabaseAsync(Meal);
        await Task.Delay(500);
        if (!result.HasError) {
            _snackBar.Add("Recipe deleted",Severity.Success);
            MudDialog.Close();
            _isLoading = false;
            return true;
        }
        _isLoading = false;
        return false;
    }
}
