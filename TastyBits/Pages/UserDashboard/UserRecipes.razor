@page "/dashboard/allrecipes";
@page "/dashboard/home";

@layout DashboardLayout;
@using System.Collections.ObjectModel;
@using Microsoft.EntityFrameworkCore;
@using Serilog;
@using TastyBits.Data;
@using TastyBits.Model;
@using TastyBits.Pages.UserDashboard.Components;
@using TastyBits.Services;
@inject MealServiceMediator _mealService;
@inject TastyDialogService _tastyDialog;
@inject ISnackbar _snackBar;
@inject LoggedUserService _loggedUserService;
@inject NavigationManager navManager;

<AuthorizeView>
    <Authorized>
        <div id="recipeToolbar" class="flex p-2 bg-gray-50 rounded-lg focus:outline-none">
            <button @onclick="@( ()=>StateHasChanged() )"> Steta</button>
            <select>
                <option>Vege</option>
                <option>Meat</option>
                <option>Dessert</option>
                <option>Breakfest</option>
            </select>
        </div>
        <div id="recipes" class="flex flex-wrap mt-5 gap-10 p-2 ">
            <div @onclick=@AddNewMeal class="flex justify-center items-center border-dashed border-emerald-200 border-2 rounded-lg w-[27rem]
                    hover:cursor-pointer hover:bg-emerald-50
                    hover:border-emerald-300 duration-300">
                <div class="text-center text-emerald-500 opacity-60">
                    <i class="fa fa-add h-10 w-10"></i>
                    <p class="font-medium text-lg">Add New</p>
                </div>
            </div>
            @foreach (UserMeal re in _allRecipes) {
                <RecipeCard RecipeName="@re.Name" 
                RecipeDescription="@re.Description" 
                RecipeImage="@re.Images.FirstOrDefault()"
                CookingTime="@re.CookingTime"
                PrepTime="@re.PrepTime"
                OnOpenButtonClick="@( ()=>OpenSelectedMeal(re) )"
                >
            </RecipeCard>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <h1 role="note">Please login in to view this page</h1>
    </NotAuthorized>
</AuthorizeView>


@code {
    private List<UserMeal> _allRecipes = new List<UserMeal>();

    protected override async Task OnInitializedAsync()
    {

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_loggedUserService.UserStore != null & firstRender) {
            await LoadUserRecipes();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task AddNewMeal()
    {
        var newDialog=await _tastyDialog.ShowAddNewMealDialog();
        var result = await newDialog.Result;
        await LoadUserRecipes();
    }
    private async Task OpenSelectedMeal(UserMeal selectedMeal)
    {
        var newDialog = await _tastyDialog.ShowMealDialog(selectedMeal);
        var result = await newDialog.Result;
        await LoadUserRecipes();
    }
    private async Task LoadUserRecipes()
    {
        _allRecipes = await _mealService.GetAllUserMealsAsync(_loggedUserService.UserStore.Id);
        StateHasChanged();
    }
}
